// RUN: %target-sil-opt -dont-abort-on-memory-lifetime-errors -o /dev/null %s 2>&1 | %FileCheck %s
// REQUIRES: asserts

sil_stage canonical

import Builtin
import Swift
import SwiftShims

// A non-trivial type
class T {
  init()
}

struct Inner {
  var a: T
  var b: T
}

struct Outer {
  var x: T
  var y: Inner
  var z: T
}

struct Mixed {
  var t: T
  var i: Int
}

// CHECK: SIL memory lifetime failure in @test_simple: indirect argument is not alive at function return
sil [ossa] @test_simple : $@convention(thin) (@inout T) -> @owned T {
bb0(%0 : $*T):
  %2 = begin_access [read] [static] %0 : $*T
  %3 = load [copy] %2 : $*T
  end_access %2 : $*T
  br bb1
bb1:
  destroy_addr %0 : $*T
  return %3 : $T
}

// CHECK: SIL memory lifetime failure in @test_loop: memory is initialized at function return but shouldn't
sil [ossa] @test_loop : $@convention(thin) (@in T) -> @owned T {
bb0(%0 : $*T):
  %2 = begin_access [read] [static] %0 : $*T
  %3 = load [copy] %2 : $*T
  end_access %2 : $*T
  br bb1
bb1:
  cond_br undef, bb2, bb3
bb2:
  br bb1
bb3:
  return %3 : $T
}

// CHECK: SIL memory lifetime failure in @test_merge: lifetime mismatch in predecessors
sil [ossa] @test_merge : $@convention(thin) (@in_guaranteed T) -> () {
bb0(%0 : $*T):
  %2 = alloc_stack $T
  cond_br undef, bb1, bb2

bb1:
  copy_addr %0 to [initialization] %2 : $*T
  br bb3
bb2:
  copy_addr %0 to [initialization] %2 : $*T
  destroy_addr %2 : $*T
  br bb3

bb3:
  dealloc_stack %2 : $*T
  %r = tuple ()
  return %r : $()
}


// CHECK: SIL memory lifetime failure in @test_nesting: memory is initialized at function return but shouldn't
sil [ossa] @test_nesting : $@convention(thin) (@in Outer) -> () {
bb0(%0 : $*Outer):
  %1 = struct_element_addr %0 : $*Outer, #Outer.x
  %2 = struct_element_addr %0 : $*Outer, #Outer.y
  destroy_addr %1 : $*T
  destroy_addr %2 : $*Inner
  %3 = tuple ()
  return %3 : $()
}

sil @throwing_func : $@convention(thin) () -> (@out T, @error Error)

// CHECK: SIL memory lifetime failure in @test_try_apply_return: memory is initialized, but shouldn't
sil [ossa] @test_try_apply_return : $@convention(thin) () -> ((), @error Error) {
bb0:
  %0 = alloc_stack $T
  %1 = function_ref @throwing_func : $@convention(thin) () -> (@out T, @error Error)
  try_apply %1(%0) : $@convention(thin) () -> (@out T, @error Error), normal bb1, error bb2

bb1(%2 : $()):
  dealloc_stack %0 : $*T
  %3 = tuple ()
  return %3 : $()

bb2(%4 : @owned $Error):
  dealloc_stack %0 : $*T
  throw %4 : $Error

}

// CHECK: SIL memory lifetime failure in @test_try_apply_throw: memory is not initialized, but should
sil [ossa] @test_try_apply_throw : $@convention(thin) () -> ((), @error Error) {
bb0:
  %0 = alloc_stack $T
  %1 = function_ref @throwing_func : $@convention(thin) () -> (@out T, @error Error)
  try_apply %1(%0) : $@convention(thin) () -> (@out T, @error Error), normal bb1, error bb2

bb1(%2 : $()):
  destroy_addr %0 : $*T
  dealloc_stack %0 : $*T
  %3 = tuple ()
  return %3 : $()

bb2(%4 : @owned $Error):
  destroy_addr %0 : $*T
  dealloc_stack %0 : $*T
  throw %4 : $Error

}

// CHECK: SIL memory lifetime failure in @test_single_block: memory is initialized, but shouldn't
sil [ossa] @test_single_block : $@convention(thin) (@owned T) -> () {
bb0(%0 : @owned $T):
  %2 = alloc_stack $T
  store %0 to [init] %2 : $*T
  dealloc_stack %2 : $*T
  %r = tuple ()
  return %r : $()
}

// CHECK: SIL memory lifetime failure in @test_mixed: memory is not initialized, but should
sil [ossa] @test_mixed : $@convention(thin) (@in Mixed, Int) -> Int {
bb0(%0 : $*Mixed, %1 : $Int):
  %2 = struct_element_addr %0 : $*Mixed, #Mixed.i
  store %1 to [trivial] %2 : $*Int
  destroy_addr %0 : $*Mixed
  %3 = load [trivial] %2 : $*Int
  return %3 : $Int
}

// CHECK: SIL memory lifetime failure in @test_missing_store_to_trivial: memory is not initialized, but should
sil [ossa] @test_missing_store_to_trivial : $@convention(thin) () -> Int {
bb0:
  %1 = alloc_stack $Mixed
  %2 = struct_element_addr %1 : $*Mixed, #Mixed.i
  %3 = load [trivial] %2 : $*Int
  dealloc_stack %1 : $*Mixed
  return %3 : $Int
}

// CHECK: SIL memory lifetime failure in @test_load_after_dealloc: memory is not initialized, but should
sil [ossa] @test_load_after_dealloc : $@convention(thin) (Int) -> Int {
bb0(%0 : $Int):
  %1 = alloc_stack $Mixed
  %2 = struct_element_addr %1 : $*Mixed, #Mixed.i
  store %0 to [trivial] %2 : $*Int
  dealloc_stack %1 : $*Mixed
  %3 = load [trivial] %2 : $*Int
  return %3 : $Int
}

// CHECK: SIL memory lifetime failure in @test_switch_enum_addr: memory is initialized at function return but shouldn't
sil [ossa] @test_switch_enum_addr : $@convention(thin) (@in Optional<T>) -> () {
bb0(%0 : $*Optional<T>):
  switch_enum_addr %0 : $*Optional<T>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2

bb1:
  %2 = unchecked_take_enum_data_addr %0 : $*Optional<T>, #Optional.some!enumelt
  br bb3

bb2:
  br bb3

bb3:
  %r = tuple ()
  return %r : $()
}

// CHECK: SIL memory lifetime failure in @test_switch_enum: memory is initialized at function return but shouldn't
sil [ossa] @test_switch_enum : $@convention(thin) (@in Optional<T>) -> () {
bb0(%0 : $*Optional<T>):
  %1 = load_borrow %0 : $*Optional<T>
  switch_enum %1 : $Optional<T>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2

bb1(%3 : $T):
  end_borrow %1 : $Optional<T>
  %2 = unchecked_take_enum_data_addr %0 : $*Optional<T>, #Optional.some!enumelt
  br bb3

bb2:
  end_borrow %1 : $Optional<T>
  br bb3

bb3:
  %r = tuple ()
  return %r : $()
}

// CHECK: SIL memory lifetime failure in @test_init_enum: indirect argument is not alive at function return
sil [ossa] @test_init_enum : $@convention(thin) (@in_guaranteed T) -> @out Optional<T> {
bb0(%0 : $*Optional<T>, %1 : $*T):
  cond_br undef, bb1, bb2

bb1:
  inject_enum_addr %0 : $*Optional<T>, #Optional.none!enumelt
  br bb3

bb2:
  %5 = init_enum_data_addr %0 : $*Optional<T>, #Optional.some!enumelt
  inject_enum_addr %0 : $*Optional<T>, #Optional.some!enumelt
  br bb3

bb3:
  %r = tuple ()
  return %r : $()
}

// CHECK: SIL memory lifetime failure in @test_store_to_enum: memory is initialized, but shouldn't
sil [ossa] @test_store_to_enum : $@convention(thin) (@owned T) -> () {
bb0(%0 : @owned $T):
  %1 = alloc_stack $Optional<T>
  %2 = enum $Optional<T>, #Optional.none!enumelt
  store %2 to [trivial] %1 : $*Optional<T>
  destroy_addr %1 : $*Optional<T>
  %3 = enum $Optional<T>, #Optional.some!enumelt, %0 : $T
  store %3 to [init] %1 : $*Optional<T>
  dealloc_stack %1 : $*Optional<T>
  %r = tuple ()
  return %r : $()
}

sil [ossa] @closure : $@convention(thin) (@in_guaranteed T) -> () 

// CHECK: SIL memory lifetime failure in @test_non_escaping_closure: memory is initialized at function return but shouldn't
sil [ossa] @test_non_escaping_closure : $@convention(thin) (@in T) -> () {
bb0(%0 :  $*T):
  %func = function_ref @closure : $@convention(thin) (@in_guaranteed T) -> ()
  %pa = partial_apply [callee_guaranteed] [on_stack] %func(%0) : $@convention(thin) (@in_guaranteed T) -> ()
  dealloc_stack %pa : $@noescape @callee_guaranteed () -> () 
  %res = tuple ()
  return %res : $()
}

// CHECK: SIL memory lifetime failure in @test_escaping_closure: indirect argument is not alive at function return
sil [ossa] @test_escaping_closure : $@convention(thin) (@in_guaranteed T) -> () {
bb0(%0 :  $*T):
  %func = function_ref @closure : $@convention(thin) (@in_guaranteed T) -> ()
  %pa = partial_apply %func(%0) : $@convention(thin) (@in_guaranteed T) -> ()
  destroy_value %pa : $@callee_owned () -> ()
  %res = tuple ()
  return %res : $()
}

// CHECK: SIL memory lifetime failure in @test_store_borrow_destroy: memory is not initialized, but should
sil [ossa] @test_store_borrow_destroy : $@convention(thin) (@guaranteed T) -> () {
bb0(%0 :  @guaranteed $T):
  %s = alloc_stack $T
  store_borrow %0 to %s : $*T
  destroy_addr %s : $*T
  dealloc_stack %s : $*T
  %res = tuple ()
  return %res : $()
}

sil [ossa] @func_with_inout_param : $@convention(thin) (@inout T) -> ()

// CHECK: SIL memory lifetime failure in @test_store_borrow_inout: store-borrow location cannot be written
sil [ossa] @test_store_borrow_inout : $@convention(thin) (@guaranteed T) -> () {
bb0(%0 :  @guaranteed $T):
  %s = alloc_stack $T
  store_borrow %0 to %s : $*T
  %f = function_ref @func_with_inout_param : $@convention(thin) (@inout T) -> ()
  %a = apply %f(%s) : $@convention(thin) (@inout T) -> ()
  dealloc_stack %s : $*T
  %res = tuple ()
  return %res : $()
}

// CHECK: SIL memory lifetime failure in @test_store_borrow_store: store-borrow location cannot be written
sil [ossa] @test_store_borrow_store : $@convention(thin) (@guaranteed T, @owned T) -> () {
bb0(%0 :  @guaranteed $T, %1 : @owned $T):
  %s = alloc_stack $T
  store_borrow %0 to %s : $*T
  store %1 to [assign] %s : $*T
  dealloc_stack %s : $*T
  %res = tuple ()
  return %res : $()
}

// CHECK: SIL memory lifetime failure in @test_store_borrow_load: store-borrow location cannot be written
sil [ossa] @test_store_borrow_load : $@convention(thin) (@guaranteed T) -> @owned T {
bb0(%0 :  @guaranteed $T):
  %s = alloc_stack $T
  store_borrow %0 to %s : $*T
  %res = load [take] %s : $*T
  dealloc_stack %s : $*T
  return %res : $T
}

// CHECK: SIL memory lifetime failure in @test_store_borrow_copy_src: store-borrow location cannot be written
sil [ossa] @test_store_borrow_copy_src : $@convention(thin) (@guaranteed T) -> @out T {
bb0(%0 :  $*T, %1 :  @guaranteed $T):
  %s = alloc_stack $T
  store_borrow %1 to %s : $*T
  copy_addr [take] %s to [initialization] %0 : $*T
  dealloc_stack %s : $*T
  %res = tuple ()
  return %res : $()
}

// CHECK: SIL memory lifetime failure in @test_store_borrow_copy_dst: store-borrow location cannot be written
sil [ossa] @test_store_borrow_copy_dst : $@convention(thin) (@in_guaranteed T, @guaranteed T) -> () {
bb0(%0 :  $*T, %1 :  @guaranteed $T):
  %s = alloc_stack $T
  store_borrow %1 to %s : $*T
  copy_addr %0 to %s : $*T
  dealloc_stack %s : $*T
  %res = tuple ()
  return %res : $()
}

// CHECK: SIL memory lifetime failure in @test_store_borrow_init_enum: store-borrow location cannot be written
sil [ossa] @test_store_borrow_init_enum : $@convention(thin) (@guaranteed Optional<T>) -> () {
bb0(%0 :  @guaranteed $Optional<T>):
  %s = alloc_stack $Optional<T>
  store_borrow %0 to %s : $*Optional<T>
  %ie = init_enum_data_addr %s : $*Optional<T>, #Optional.some!enumelt
  dealloc_stack %s : $*Optional<T>
  %res = tuple ()
  return %res : $()
}

// CHECK: SIL memory lifetime failure in @test_store_borrow_take_enum: store-borrow location cannot be written
sil [ossa] @test_store_borrow_take_enum : $@convention(thin) (@guaranteed Optional<T>) -> () {
bb0(%0 :  @guaranteed $Optional<T>):
  %s = alloc_stack $Optional<T>
  store_borrow %0 to %s : $*Optional<T>
  %ue = unchecked_take_enum_data_addr %s : $*Optional<T>, #Optional.some!enumelt
  dealloc_stack %s : $*Optional<T>
  %res = tuple ()
  return %res : $()
}

